'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propUtils = require('./propUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DependencyInjector = function (_React$Component) {
  _inherits(DependencyInjector, _React$Component);

  function DependencyInjector() {
    _classCallCheck(this, DependencyInjector);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  DependencyInjector.prototype.getChildContext = function getChildContext() {
    return (0, _propUtils.reduceProps)(this.props);
  };

  DependencyInjector.prototype.render = function render() {
    return this.props.children;
  };

  return DependencyInjector;
}(_react2["default"].Component);

var DI = function (_React$Component2) {
  _inherits(DI, _React$Component2);

  function DI(props) {
    _classCallCheck(this, DI);

    var _this2 = _possibleConstructorReturn(this, _React$Component2.call(this, props));

    DependencyInjector.childContextTypes = (0, _propUtils.mapPropTypesToProps)(props);
    return _this2;
  }

  DI.prototype.render = function render() {
    return _react2["default"].createElement(DependencyInjector, this.props);
  };

  return DI;
}(_react2["default"].Component);

exports["default"] = DI;