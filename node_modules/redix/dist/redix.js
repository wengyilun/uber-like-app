(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["react"], factory);
	else if(typeof exports === 'object')
		exports["Redix"] = factory(require("react"));
	else
		root["Redix"] = factory(root["React"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.hookProps = exports.DI = exports.Container = undefined;

	var _Container = __webpack_require__(3);

	var _Container2 = _interopRequireDefault(_Container);

	var _DI = __webpack_require__(4);

	var _DI2 = _interopRequireDefault(_DI);

	var _propUtils = __webpack_require__(1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.Container = _Container2["default"];
	exports.DI = _DI2["default"];
	exports.hookProps = _propUtils.hookProps;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.logWarning = exports.mapPropTypesToProps = exports.reduceProps = exports.hookProps = undefined;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// This component is for test doubles, that's why we return a "dummy" <i></i>
	var hookProps = exports.hookProps = function hookProps(component) {
	  return function (props) {
	    component.props = props;
	    return _react2["default"].createElement('i', null);
	  };
	};

	var reduceProps = exports.reduceProps = function reduceProps(props) {
	  return Object.keys(props).reduce(function (reducedProps, propKey) {
	    if (propKey !== 'children') {
	      reducedProps[propKey] = props[propKey];
	    }
	    return reducedProps;
	  }, {});
	};

	var mapPropTypesToProps = exports.mapPropTypesToProps = function mapPropTypesToProps(props) {
	  var reducedProps = reduceProps(props);
	  var propTypes = {};
	  for (var key in reducedProps) {
	    // https://facebook.github.io/react/warnings/dont-call-proptypes.html
	    propTypes[key] = function () {};
	  }
	  return propTypes;
	};

	var logWarning = exports.logWarning = function logWarning(message) {
	  var warning = 'Warning: ' + message;
	  if (console.error) {
	    console.error(warning);
	  } else {
	    console.log(warning);
	  }
	};

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propUtils = __webpack_require__(1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Container = function (_React$Component) {
	  _inherits(Container, _React$Component);

	  function Container() {
	    _classCallCheck(this, Container);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  // This is the component that my container is going to render
	  Container.prototype.setComponent = function setComponent(component) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    this.childComponent = component;
	    this.options = options;

	    var propTypes = component.propTypes || options.propTypes;
	    if (!propTypes) {
	      (0, _propUtils.logWarning)('You are rendering ' + (component.name || 'a component') + ' that has no propTypes. PropTypes are used by the Redix Container\n      to set the props the container will pass to the child component. If ' + (component.name || 'your component') + ' doesn\'t use any props then ignore this warning');
	    }

	    // options.addProps are props that you want to explicitly pass down to the component that the container is rendering.
	    // This is not needed if you name the functions that you want to pass down with the same name as the presentational component's propType.
	    // options.addProps is not needed for properties t hatare injected already in the container, for instance
	    // by other functions like react-redux connect function. In most cases you don't have to use options.addProps
	    var addProps = options.addProps || {};

	    var src = 'return {';
	    for (var key in propTypes) {
	      var addProp = addProps[key];
	      if (addProp && typeof addProp === 'string') {
	        src += key + ': ' + addProp + ',';
	      } else if (addProp) {
	        (0, _propUtils.logWarning)('{ addProps: {' + key + '} must be a string, example: \'this.state.user.id\'');
	      } else {
	        src += key + ': this[\'' + key + '\'] || props[\'' + key + '\'] || (this.state && this.state[\'' + key + '\']),';
	      }
	    }

	    if (propTypes) {
	      src = src.slice(0, -1);
	    }
	    src += '}';
	    this.getChildProps = Function('props', src);

	    var mapPropFuncs = options.mapPropFuncsToThis;
	    if (mapPropFuncs) {
	      // props that are functions become a property function of the Container object.
	      // In other words, this.props.doSomething() becomes this.doSomething().
	      // The reason is that I want to be able to inject those dependencies, for testing purposes for instance.
	      // Props are read only so I can't change them. By using this.doSomething I can change doSomething at any point.
	      for (var _key in mapPropFuncs) {
	        var prop = mapPropFuncs.functions ? mapPropFuncs.functions[_key] || mapPropFuncs[_key] : mapPropFuncs[_key];
	        if (!this.hasOwnProperty(_key) && typeof prop === 'function') {
	          this[_key] = prop;
	        }
	      }
	    }
	  };

	  // this is just syntactic sugar


	  Container.prototype.bindThis = function bindThis(funcNames) {
	    var _this2 = this;

	    var isArray = Object.prototype.toString.call(funcNames) === '[object Array]';
	    if (isArray && funcNames.length === 0) {
	      (0, _propUtils.logWarning)('bindThis paramameter can not be an empty array');
	    } else if (isArray) {
	      funcNames.map(function (funcName) {
	        if (typeof funcName !== 'string') {
	          (0, _propUtils.logWarning)('bindThis paramameter has to be an array of strings');
	        } else {
	          _this2.bindThisFunc(funcName);
	        }
	      });
	    } else if (typeof funcNames === 'string') {
	      this.bindThisFunc(funcNames);
	    } else {
	      (0, _propUtils.logWarning)('bindThis paramameter has to be either a string or an array of strings');
	    }
	  };

	  Container.prototype.bindThisFunc = function bindThisFunc(funcName) {
	    if (typeof this[funcName] === 'function') {
	      this[funcName] = this[funcName].bind(this);
	    } else {
	      (0, _propUtils.logWarning)('this.' + funcName + ' is not a function');
	    }
	  };

	  Container.prototype.render = function render() {
	    // The component that will be rendered can be set in two different ways:
	    // 1. Via Container's props, example <ChatContainer component="MockChat" />.
	    //    It'll be available in the Container as this.props.component
	    // 2. Via constructor of the component that extends this Container.
	    //    It'll be available as this.childComponent
	    // this.props is checked first to enable dependency injection
	    var ChildComponent = this.props.component || this.childComponent;
	    var children = this.options.disablePropsChildren ? null : this.props.children;
	    return _react2["default"].createElement(ChildComponent, _extends({}, this.getChildProps(this.props), { children: children }));
	  };

	  return Container;
	}(_react2["default"].Component);

	exports["default"] = Container;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propUtils = __webpack_require__(1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DependencyInjector = function (_React$Component) {
	  _inherits(DependencyInjector, _React$Component);

	  function DependencyInjector() {
	    _classCallCheck(this, DependencyInjector);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  DependencyInjector.prototype.getChildContext = function getChildContext() {
	    return (0, _propUtils.reduceProps)(this.props);
	  };

	  DependencyInjector.prototype.render = function render() {
	    return this.props.children;
	  };

	  return DependencyInjector;
	}(_react2["default"].Component);

	var DI = function (_React$Component2) {
	  _inherits(DI, _React$Component2);

	  function DI(props) {
	    _classCallCheck(this, DI);

	    var _this2 = _possibleConstructorReturn(this, _React$Component2.call(this, props));

	    DependencyInjector.childContextTypes = (0, _propUtils.mapPropTypesToProps)(props);
	    return _this2;
	  }

	  DI.prototype.render = function render() {
	    return _react2["default"].createElement(DependencyInjector, this.props);
	  };

	  return DI;
	}(_react2["default"].Component);

	exports["default"] = DI;

/***/ }
/******/ ])
});
;